digraph "classes" {
    rankdir = BT;
    charset = "utf-8";
    "network.Attention_module.Attention" [color = "black";fontcolor = "black";label = <{Attention|dim<br ALIGN="LEFT"/>dim_out<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>scaling<br ALIGN="LEFT"/>to_k<br ALIGN="LEFT"/>to_out<br ALIGN="LEFT"/>to_q<br ALIGN="LEFT"/>to_v<br ALIGN="LEFT"/>|forward(query, key, value)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.BiasedAxialAttention" [color = "black";fontcolor = "black";label = <{BiasedAxialAttention|dim<br ALIGN="LEFT"/>dim_out<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>is_row : bool<br ALIGN="LEFT"/>norm_pair<br ALIGN="LEFT"/>scaling<br ALIGN="LEFT"/>to_b<br ALIGN="LEFT"/>to_g<br ALIGN="LEFT"/>to_k<br ALIGN="LEFT"/>to_out<br ALIGN="LEFT"/>to_q<br ALIGN="LEFT"/>to_v<br ALIGN="LEFT"/>|forward(pair, bias)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.AuxiliaryPredictor.BinderNetwork" [color = "black";fontcolor = "black";label = <{BinderNetwork|classify<br ALIGN="LEFT"/>|forward(pae, same_chain)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.scheduler.CosineAnnealingWarmupRestarts" [color = "black";fontcolor = "black";label = <{CosineAnnealingWarmupRestarts|base_lrs : list<br ALIGN="LEFT"/>base_max_lr : float<br ALIGN="LEFT"/>cur_cycle_steps : int<br ALIGN="LEFT"/>cycle : int<br ALIGN="LEFT"/>cycle_mult : float<br ALIGN="LEFT"/>first_cycle_steps : int<br ALIGN="LEFT"/>gamma : float<br ALIGN="LEFT"/>last_epoch<br ALIGN="LEFT"/>max_lr : float<br ALIGN="LEFT"/>min_lr : float<br ALIGN="LEFT"/>step_in_cycle : int<br ALIGN="LEFT"/>warmup_steps : int<br ALIGN="LEFT"/>|get_lr()<br ALIGN="LEFT"/>init_lr()<br ALIGN="LEFT"/>step(epoch)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.data_loader.Dataset" [color = "black";fontcolor = "black";label = <{Dataset|IDs<br ALIGN="LEFT"/>homo<br ALIGN="LEFT"/>item_dict<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>p_homo_cut : float<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>pick_top : bool<br ALIGN="LEFT"/>unclamp_cut : float<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.data_loader.DatasetComplex" [color = "black";fontcolor = "black";label = <{DatasetComplex|IDs<br ALIGN="LEFT"/>item_dict<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>negative : bool<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>pick_top : bool<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.data_loader.DatasetNAComplex" [color = "black";fontcolor = "black";label = <{DatasetNAComplex|IDs<br ALIGN="LEFT"/>item_dict<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>native_NA_frac : float<br ALIGN="LEFT"/>negative : bool<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>pick_top : bool<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.data_loader.DatasetRNA" [color = "black";fontcolor = "black";label = <{DatasetRNA|IDs<br ALIGN="LEFT"/>item_dict<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.AuxiliaryPredictor.DistanceNetwork" [color = "black";fontcolor = "black";label = <{DistanceNetwork|proj_asymm<br ALIGN="LEFT"/>proj_symm<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.data_loader.DistilledDataset" [color = "black";fontcolor = "black";label = <{DistilledDataset|compl_IDs<br ALIGN="LEFT"/>compl_dict<br ALIGN="LEFT"/>compl_inds<br ALIGN="LEFT"/>compl_loader<br ALIGN="LEFT"/>fb_IDs<br ALIGN="LEFT"/>fb_dict<br ALIGN="LEFT"/>fb_inds<br ALIGN="LEFT"/>fb_loader<br ALIGN="LEFT"/>homo<br ALIGN="LEFT"/>na_compl_IDs<br ALIGN="LEFT"/>na_compl_dict<br ALIGN="LEFT"/>na_compl_inds<br ALIGN="LEFT"/>na_compl_loader<br ALIGN="LEFT"/>na_neg_IDs<br ALIGN="LEFT"/>na_neg_dict<br ALIGN="LEFT"/>na_neg_inds<br ALIGN="LEFT"/>na_neg_loader<br ALIGN="LEFT"/>native_NA_frac : float<br ALIGN="LEFT"/>neg_IDs<br ALIGN="LEFT"/>neg_dict<br ALIGN="LEFT"/>neg_inds<br ALIGN="LEFT"/>neg_loader<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>pdb_IDs<br ALIGN="LEFT"/>pdb_dict<br ALIGN="LEFT"/>pdb_inds<br ALIGN="LEFT"/>pdb_loader<br ALIGN="LEFT"/>rna_IDs<br ALIGN="LEFT"/>rna_dict<br ALIGN="LEFT"/>rna_inds<br ALIGN="LEFT"/>rna_loader<br ALIGN="LEFT"/>unclamp_cut : float<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.data_loader.DistributedWeightedSampler" [color = "black";fontcolor = "black";label = <{DistributedWeightedSampler|compl_weights<br ALIGN="LEFT"/>dataset<br ALIGN="LEFT"/>epoch : int<br ALIGN="LEFT"/>fb_weights<br ALIGN="LEFT"/>na_compl_weights<br ALIGN="LEFT"/>neg_na_compl_weights<br ALIGN="LEFT"/>neg_weights<br ALIGN="LEFT"/>num_compl_per_epoch : int<br ALIGN="LEFT"/>num_fb_per_epoch : int<br ALIGN="LEFT"/>num_na_compl_per_epoch : int<br ALIGN="LEFT"/>num_neg_na_compl_per_epoch : int<br ALIGN="LEFT"/>num_neg_per_epoch : int<br ALIGN="LEFT"/>num_pdb_per_epoch<br ALIGN="LEFT"/>num_replicas : NoneType<br ALIGN="LEFT"/>num_rna_per_epoch : int<br ALIGN="LEFT"/>num_samples<br ALIGN="LEFT"/>pdb_weights<br ALIGN="LEFT"/>rank : NoneType<br ALIGN="LEFT"/>replacement : bool<br ALIGN="LEFT"/>rna_weights<br ALIGN="LEFT"/>total_size : int<br ALIGN="LEFT"/>|set_epoch(epoch)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.util_module.Dropout" [color = "black";fontcolor = "black";label = <{Dropout|broadcast_dim : NoneType<br ALIGN="LEFT"/>p_drop : float<br ALIGN="LEFT"/>sampler<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Embeddings.Extra_emb" [color = "black";fontcolor = "black";label = <{Extra_emb|emb<br ALIGN="LEFT"/>emb_q<br ALIGN="LEFT"/>|forward(msa, seq, idx)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.FeedForwardLayer" [color = "black";fontcolor = "black";label = <{FeedForwardLayer|dropout<br ALIGN="LEFT"/>linear1<br ALIGN="LEFT"/>linear2<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>|forward(src)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.scoring.HbAccType" [color = "black";fontcolor = "black";label = <{HbAccType|AHX : int<br ALIGN="LEFT"/>CXA : int<br ALIGN="LEFT"/>CXL : int<br ALIGN="LEFT"/>HXL : int<br ALIGN="LEFT"/>IME : int<br ALIGN="LEFT"/>NTYPES : int<br ALIGN="LEFT"/>PBA : int<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.scoring.HbAtom" [color = "black";fontcolor = "black";label = <{HbAtom|AC : int<br ALIGN="LEFT"/>DA : int<br ALIGN="LEFT"/>DO : int<br ALIGN="LEFT"/>HP : int<br ALIGN="LEFT"/>NO : int<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.scoring.HbDonType" [color = "black";fontcolor = "black";label = <{HbDonType|AHX : int<br ALIGN="LEFT"/>AMO : int<br ALIGN="LEFT"/>CXA : int<br ALIGN="LEFT"/>GDE : int<br ALIGN="LEFT"/>HXL : int<br ALIGN="LEFT"/>IME : int<br ALIGN="LEFT"/>IND : int<br ALIGN="LEFT"/>NTYPES : int<br ALIGN="LEFT"/>PBA : int<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.scoring.HbHybType" [color = "black";fontcolor = "black";label = <{HbHybType|NTYPES : int<br ALIGN="LEFT"/>RING : int<br ALIGN="LEFT"/>SP2 : int<br ALIGN="LEFT"/>SP3 : int<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.scoring.HbPolyType" [color = "black";fontcolor = "black";label = <{HbPolyType|AHD_1h : int<br ALIGN="LEFT"/>AHD_1i : int<br ALIGN="LEFT"/>AHD_1j : int<br ALIGN="LEFT"/>AHD_1k : int<br ALIGN="LEFT"/>ahdist_aASN_dARG : int<br ALIGN="LEFT"/>ahdist_aASN_dASN : int<br ALIGN="LEFT"/>ahdist_aASN_dGLY : int<br ALIGN="LEFT"/>ahdist_aASN_dHIS : int<br ALIGN="LEFT"/>ahdist_aASN_dLYS : int<br ALIGN="LEFT"/>ahdist_aASN_dSER : int<br ALIGN="LEFT"/>ahdist_aASN_dTRP : int<br ALIGN="LEFT"/>ahdist_aASN_dTYR : int<br ALIGN="LEFT"/>ahdist_aASP_dARG : int<br ALIGN="LEFT"/>ahdist_aASP_dASN : int<br ALIGN="LEFT"/>ahdist_aASP_dGLY : int<br ALIGN="LEFT"/>ahdist_aASP_dHIS : int<br ALIGN="LEFT"/>ahdist_aASP_dLYS : int<br ALIGN="LEFT"/>ahdist_aASP_dSER : int<br ALIGN="LEFT"/>ahdist_aASP_dTRP : int<br ALIGN="LEFT"/>ahdist_aASP_dTYR : int<br ALIGN="LEFT"/>ahdist_aGLY_dARG : int<br ALIGN="LEFT"/>ahdist_aGLY_dASN : int<br ALIGN="LEFT"/>ahdist_aGLY_dGLY : int<br ALIGN="LEFT"/>ahdist_aGLY_dHIS : int<br ALIGN="LEFT"/>ahdist_aGLY_dLYS : int<br ALIGN="LEFT"/>ahdist_aGLY_dSER : int<br ALIGN="LEFT"/>ahdist_aGLY_dTRP : int<br ALIGN="LEFT"/>ahdist_aGLY_dTYR : int<br ALIGN="LEFT"/>ahdist_aHIS_dARG : int<br ALIGN="LEFT"/>ahdist_aHIS_dASN : int<br ALIGN="LEFT"/>ahdist_aHIS_dGLY : int<br ALIGN="LEFT"/>ahdist_aHIS_dHIS : int<br ALIGN="LEFT"/>ahdist_aHIS_dLYS : int<br ALIGN="LEFT"/>ahdist_aHIS_dSER : int<br ALIGN="LEFT"/>ahdist_aHIS_dTRP : int<br ALIGN="LEFT"/>ahdist_aHIS_dTYR : int<br ALIGN="LEFT"/>ahdist_aSER_dARG : int<br ALIGN="LEFT"/>ahdist_aSER_dASN : int<br ALIGN="LEFT"/>ahdist_aSER_dGLY : int<br ALIGN="LEFT"/>ahdist_aSER_dHIS : int<br ALIGN="LEFT"/>ahdist_aSER_dLYS : int<br ALIGN="LEFT"/>ahdist_aSER_dSER : int<br ALIGN="LEFT"/>ahdist_aSER_dTRP : int<br ALIGN="LEFT"/>ahdist_aSER_dTYR : int<br ALIGN="LEFT"/>ahdist_aTYR_dARG : int<br ALIGN="LEFT"/>ahdist_aTYR_dASN : int<br ALIGN="LEFT"/>ahdist_aTYR_dGLY : int<br ALIGN="LEFT"/>ahdist_aTYR_dHIS : int<br ALIGN="LEFT"/>ahdist_aTYR_dLYS : int<br ALIGN="LEFT"/>ahdist_aTYR_dSER : int<br ALIGN="LEFT"/>ahdist_aTYR_dTRP : int<br ALIGN="LEFT"/>ahdist_aTYR_dTYR : int<br ALIGN="LEFT"/>cosBAH_6i : int<br ALIGN="LEFT"/>cosBAH_7 : int<br ALIGN="LEFT"/>cosBAH_off : int<br ALIGN="LEFT"/>|}>;shape = "record";style = "solid";];
    "network.Track_module.IterBlock" [color = "black";fontcolor = "black";label = <{IterBlock|msa2msa<br ALIGN="LEFT"/>msa2pair<br ALIGN="LEFT"/>pair2pair<br ALIGN="LEFT"/>str2str<br ALIGN="LEFT"/>|forward(msa, pair, xyz, state, idx, use_checkpoint)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.IterativeSimulator" [color = "black";fontcolor = "black";label = <{IterativeSimulator|aamask : NoneType<br ALIGN="LEFT"/>extra_block<br ALIGN="LEFT"/>hbbaseatoms : NoneType<br ALIGN="LEFT"/>hbpolys : NoneType<br ALIGN="LEFT"/>hbtypes : NoneType<br ALIGN="LEFT"/>lj_correction_parameters : NoneType<br ALIGN="LEFT"/>lj_lin : float<br ALIGN="LEFT"/>ljlk_parameters : NoneType<br ALIGN="LEFT"/>main_block<br ALIGN="LEFT"/>n_extra_block : int<br ALIGN="LEFT"/>n_main_block : int<br ALIGN="LEFT"/>n_ref_block : int<br ALIGN="LEFT"/>num_bonds : NoneType<br ALIGN="LEFT"/>str_refiner<br ALIGN="LEFT"/>xyzconverter<br ALIGN="LEFT"/>|forward(seq, msa, msa_full, pair, xyz, state, idx, same_chain, use_checkpoint)<br ALIGN="LEFT"/>get_gradients(seq, idx, xyz, alpha)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.AuxiliaryPredictor.LDDTNetwork" [color = "black";fontcolor = "black";label = <{LDDTNetwork|proj<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.loss.LJLoss" [color = "black";fontcolor = "black";label = <{LJLoss|<br ALIGN="LEFT"/>|backward(ctx, grad_output)<br ALIGN="LEFT"/>forward(ctx, xs, seq, aamask, ljparams, ljcorr, num_bonds, lj_lin, lj_hb_dis, lj_OHdon_dis, lj_hbond_hdis, eps, training)<br ALIGN="LEFT"/>ljVdV(deltas, sigma, epsilon, lj_lin, eps)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.MSA2Pair" [color = "black";fontcolor = "black";label = <{MSA2Pair|norm<br ALIGN="LEFT"/>proj_left<br ALIGN="LEFT"/>proj_out<br ALIGN="LEFT"/>proj_right<br ALIGN="LEFT"/>|forward(msa, pair)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.MSAColAttention" [color = "black";fontcolor = "black";label = <{MSAColAttention|dim : int<br ALIGN="LEFT"/>h : int<br ALIGN="LEFT"/>norm_msa<br ALIGN="LEFT"/>scaling<br ALIGN="LEFT"/>to_g<br ALIGN="LEFT"/>to_k<br ALIGN="LEFT"/>to_out<br ALIGN="LEFT"/>to_q<br ALIGN="LEFT"/>to_v<br ALIGN="LEFT"/>|forward(msa)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.MSAColGlobalAttention" [color = "black";fontcolor = "black";label = <{MSAColGlobalAttention|dim : int<br ALIGN="LEFT"/>h : int<br ALIGN="LEFT"/>norm_msa<br ALIGN="LEFT"/>scaling<br ALIGN="LEFT"/>to_g<br ALIGN="LEFT"/>to_k<br ALIGN="LEFT"/>to_out<br ALIGN="LEFT"/>to_q<br ALIGN="LEFT"/>to_v<br ALIGN="LEFT"/>|forward(msa)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.MSAPairStr2MSA" [color = "black";fontcolor = "black";label = <{MSAPairStr2MSA|col_attn<br ALIGN="LEFT"/>drop_row<br ALIGN="LEFT"/>emb_rbf<br ALIGN="LEFT"/>ff<br ALIGN="LEFT"/>norm_pair<br ALIGN="LEFT"/>norm_state<br ALIGN="LEFT"/>proj_state<br ALIGN="LEFT"/>row_attn<br ALIGN="LEFT"/>|forward(msa, pair, rbf_feat, state)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.MSARowAttentionWithBias" [color = "black";fontcolor = "black";label = <{MSARowAttentionWithBias|dim : int<br ALIGN="LEFT"/>h : int<br ALIGN="LEFT"/>norm_msa<br ALIGN="LEFT"/>norm_pair<br ALIGN="LEFT"/>scaling<br ALIGN="LEFT"/>seq_weight<br ALIGN="LEFT"/>to_b<br ALIGN="LEFT"/>to_g<br ALIGN="LEFT"/>to_k<br ALIGN="LEFT"/>to_out<br ALIGN="LEFT"/>to_q<br ALIGN="LEFT"/>to_v<br ALIGN="LEFT"/>|forward(msa, pair)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Embeddings.MSA_emb" [color = "black";fontcolor = "black";label = <{MSA_emb|emb<br ALIGN="LEFT"/>emb_left<br ALIGN="LEFT"/>emb_q<br ALIGN="LEFT"/>emb_right<br ALIGN="LEFT"/>emb_state<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>|forward(msa, seq, idx, same_chain)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.AuxiliaryPredictor.MaskedTokenNetwork" [color = "black";fontcolor = "black";label = <{MaskedTokenNetwork|proj<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.AuxiliaryPredictor.PAENetwork" [color = "black";fontcolor = "black";label = <{PAENetwork|proj<br ALIGN="LEFT"/>|forward(pair, state)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.PairStr2Pair" [color = "black";fontcolor = "black";label = <{PairStr2Pair|col_attn<br ALIGN="LEFT"/>drop_col<br ALIGN="LEFT"/>drop_row<br ALIGN="LEFT"/>ff<br ALIGN="LEFT"/>row_attn<br ALIGN="LEFT"/>|forward(pair, rbf_feat)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.PositionalEncoding2D" [color = "black";fontcolor = "black";label = <{PositionalEncoding2D|emb<br ALIGN="LEFT"/>emb_chain<br ALIGN="LEFT"/>maxpos : int<br ALIGN="LEFT"/>minpos : int<br ALIGN="LEFT"/>nbin<br ALIGN="LEFT"/>|forward(idx, same_chain)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.predict.Predictor" [color = "black";fontcolor = "black";label = <{Predictor|active_fn<br ALIGN="LEFT"/>device : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>model_weights<br ALIGN="LEFT"/>xyz_converter<br ALIGN="LEFT"/>|load_model(model_weights)<br ALIGN="LEFT"/>predict(inputs, out_prefix, ffdb, n_templ)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Embeddings.Recycling" [color = "black";fontcolor = "black";label = <{Recycling|norm_msa<br ALIGN="LEFT"/>norm_pair<br ALIGN="LEFT"/>norm_state<br ALIGN="LEFT"/>proj_dist<br ALIGN="LEFT"/>proj_sctors<br ALIGN="LEFT"/>proj_state : NoneType<br ALIGN="LEFT"/>rbf_sigma : float<br ALIGN="LEFT"/>|forward(msa, pair, xyz, state, sctors)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.resnet.ResBlock2D_bottleneck" [color = "black";fontcolor = "black";label = <{ResBlock2D_bottleneck|layer<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.resnet.ResidualNetwork" [color = "black";fontcolor = "black";label = <{ResidualNetwork|layer<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.RoseTTAFoldModel.RoseTTAFoldModule" [color = "black";fontcolor = "black";label = <{RoseTTAFoldModule|aa_pred<br ALIGN="LEFT"/>bind_pred<br ALIGN="LEFT"/>c6d_pred<br ALIGN="LEFT"/>full_emb<br ALIGN="LEFT"/>latent_emb<br ALIGN="LEFT"/>lddt_pred<br ALIGN="LEFT"/>pae_pred<br ALIGN="LEFT"/>recycle<br ALIGN="LEFT"/>simulator<br ALIGN="LEFT"/>templ_emb<br ALIGN="LEFT"/>|forward(msa_latent, msa_full, seq, seq_unmasked, xyz, sctors, idx, t1d, t2d, xyz_t, alpha_t, mask_t, same_chain, msa_prev, pair_prev, state_prev, return_raw, return_full, use_checkpoint)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.SCPred" [color = "black";fontcolor = "black";label = <{SCPred|linear_1<br ALIGN="LEFT"/>linear_2<br ALIGN="LEFT"/>linear_3<br ALIGN="LEFT"/>linear_4<br ALIGN="LEFT"/>linear_out<br ALIGN="LEFT"/>linear_s0<br ALIGN="LEFT"/>linear_si<br ALIGN="LEFT"/>norm_s0<br ALIGN="LEFT"/>norm_si<br ALIGN="LEFT"/>|forward(seq, state)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.SE3_network.SE3TransformerWrapper" [color = "black";fontcolor = "black";label = <{SE3TransformerWrapper|l1_in : int<br ALIGN="LEFT"/>l1_out : int<br ALIGN="LEFT"/>se3<br ALIGN="LEFT"/>|forward(G, type_0_features, type_1_features, edge_features)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.SequenceWeight" [color = "black";fontcolor = "black";label = <{SequenceWeight|dim<br ALIGN="LEFT"/>dropout<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>to_key<br ALIGN="LEFT"/>to_query<br ALIGN="LEFT"/>|forward(msa)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Track_module.Str2Str" [color = "black";fontcolor = "black";label = <{Str2Str|embed_e1<br ALIGN="LEFT"/>embed_e2<br ALIGN="LEFT"/>embed_x<br ALIGN="LEFT"/>norm_edge1<br ALIGN="LEFT"/>norm_edge2<br ALIGN="LEFT"/>norm_msa<br ALIGN="LEFT"/>norm_node<br ALIGN="LEFT"/>norm_pair<br ALIGN="LEFT"/>norm_state<br ALIGN="LEFT"/>rbf_sigma : float<br ALIGN="LEFT"/>sc_predictor<br ALIGN="LEFT"/>se3<br ALIGN="LEFT"/>|forward(msa, pair, xyz, state, idx, extra_l0, extra_l1, top_k, eps)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Embeddings.Templ_emb" [color = "black";fontcolor = "black";label = <{Templ_emb|attn<br ALIGN="LEFT"/>attn_tor<br ALIGN="LEFT"/>emb<br ALIGN="LEFT"/>proj_t1d<br ALIGN="LEFT"/>templ_stack<br ALIGN="LEFT"/>|forward(t1d, t2d, alpha_t, xyz_t, mask_t, pair, state, use_checkpoint)<br ALIGN="LEFT"/>reset_parameter()<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Embeddings.TemplatePairStack" [color = "black";fontcolor = "black";label = <{TemplatePairStack|block<br ALIGN="LEFT"/>n_block : int<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>|forward(templ, rbf_feat, use_checkpoint)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.util_module.XYZConverter" [color = "black";fontcolor = "black";label = <{XYZConverter|<br ALIGN="LEFT"/>|compute_all_atom(seq, xyz, alphas)<br ALIGN="LEFT"/>get_tor_mask(seq, mask_in)<br ALIGN="LEFT"/>get_torsions(xyz_in, seq, mask_in)<br ALIGN="LEFT"/>}>;shape = "record";style = "solid";];
    "network.Attention_module.SequenceWeight" -> "network.Attention_module.MSARowAttentionWithBias" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "seq_weight"; style = "solid";];
    "network.Embeddings.TemplatePairStack" -> "network.Embeddings.Templ_emb" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "templ_stack"; style = "solid";];
    "network.Track_module.MSA2Pair" -> "network.Track_module.IterBlock" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "msa2pair"; style = "solid";];
    "network.Track_module.MSAPairStr2MSA" -> "network.Track_module.IterBlock" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "msa2msa"; style = "solid";];
    "network.Track_module.PairStr2Pair" -> "network.Track_module.IterBlock" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "pair2pair"; style = "solid";];
    "network.Track_module.SCPred" -> "network.Track_module.Str2Str" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "sc_predictor"; style = "solid";];
    "network.Track_module.Str2Str" -> "network.Track_module.IterBlock" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "str2str"; style = "solid";];
    "network.Track_module.Str2Str" -> "network.Track_module.IterativeSimulator" [arrowhead = "diamond"; arrowtail = "none"; fontcolor = "green"; label = "str_refiner"; style = "solid";];
}